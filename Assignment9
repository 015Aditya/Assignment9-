{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3023149b-e67d-41e0-917a-5a2972fdb00b",
   "metadata": {},
   "source": [
    "Question1 ->  Which function is used to open a file?file? What are the different modes of opening a file? Explain each mode\n",
    "              of file opening.\n",
    "              \n",
    "Solution  ->  In Python, we use the open() method to open files.\n",
    "              To demonstrate how we open files in Python, let's suppose we have a file named test.txt with the following content.\n",
    "              file1 = open(\"test.txt\")\n",
    "              \n",
    "(1)r\tOpen a file for reading. (default)\n",
    "(2)w\tOpen a file for writing. Creates a new file if it does not exist or truncates the file if it exists.\n",
    "(3)x\tOpen a file for exclusive creation. If the file already exists, the operation fails.\n",
    "(4)a\tOpen a file for appending at the end of the file without truncating it. Creates a new file if it does not exist.\n",
    "(5)t\tOpen in text mode. (default)\n",
    "(6)b\tOpen in binary mode.\n",
    "(7)+ \tOpen a file for updating (reading and writing)\n",
    "(8)close() \t      Closes an opened file. It has no effect if the file is already closed.\n",
    "(9)detach()\t      Separates the underlying binary buffer from the TextIOBase and returns it.\n",
    "(10)fileno()        Returns an integer number (file descriptor) of the file.\n",
    "(11)flush() \t      Flushes the write buffer of the file stream.\n",
    "(12)isatty()\t      Returns True if the file stream is interactive.\n",
    "(13)read(n) \t      Reads at most n characters from the file. Reads till end of file if it is negative or None.\n",
    "(14)readable() \t  Returns True if the file stream can be read from.\n",
    "(15)readline(n=-1)\tReads and returns one line from the file. Reads in at most n bytes if specified.\n",
    "(16)readlines(n=-1)\tReads and returns a list of lines from the file. Reads in at most n bytes/characters if specified.\n",
    "(17)seek(offset,from=SEEK_SET)\tChanges the file position to offset bytes, in reference to from (start, current, end).\n",
    "(18)seekable()\t  Returns True if the file stream supports random access.\n",
    "(19)tell()\t      Returns an integer that represents the current position of the file's object.\n",
    "(20)truncate(size=None)\tResizes the file stream to size bytes. If size is not specified, resizes to current location.\n",
    "(21)writable()\t  Returns True if the file stream can be written to.\n",
    "(22)write(s)\t      Writes the string s to the file and returns the number of characters written.\n",
    "(23)writelines(lines) Writes a list of lines to the file.\n",
    "              \n",
    "              \n",
    "              \n",
    "Question2  ->  Why close() function is used? Why is it important to close a file? \n",
    "\n",
    "Solution  ->   The close() method closes an open file.\n",
    "               You should always close your files, in some cases, due to buffering, changes made to a file may not show until you close the file.                A closed file cannot be read or written any more. Any operation, which requires that the file be opened will raise a ValueError                  after the file has been closed. Calling close() more than once is allowed.\n",
    "               Python automatically closes a file when the reference object of a file is reassigned to another file. It is a good practice to use                the close() method to close a file.\n",
    "               You've learned why it's important to close files in Python. Because files are limited resources managed by the operating system,                  making sure files are closed after use will protect against hard-to-debug issues like running out of file handles or experiencing                corrupted data.\n",
    "\n",
    "Syntax -> file.close()\n",
    "\n",
    "Example ->\n",
    "f = open(\"demofile.txt\", \"r\")\n",
    "print(f.read())\n",
    "f.close()\n",
    "\n",
    "\n",
    "Question  ->  Write a python program to create a text file. Write ‘I want to become a Data Scientist’ in that file. Then\n",
    "              close the file. Open this file and read the content of the file.\n",
    "              \n",
    "Solution  -> \n",
    "f = open(\"demo.txt\",\"w\")\n",
    "\n",
    "f.write(\"I want to become a Data Scientist\")\n",
    "\n",
    "f.close()\n",
    "              \n",
    "f = open(\"demo.txt\",\"r\")\n",
    "\n",
    "f.read()\n",
    "\n",
    "\n",
    "Question4  ->  Explain the following with python code: read(), readline() and readlines().\n",
    "\n",
    "Solution  ->  The read() method returns the specified number of bytes from the file. Default is -1 which means the whole file.\n",
    "\n",
    "Syntax\n",
    "file.read()\n",
    "\n",
    "ExampleGet your own Python Server\n",
    "Read the content of the file \"demofile.txt\":\n",
    "\n",
    "f = open(\"demofile.txt\", \"r\")\n",
    "print(f.read(33))\n",
    "\n",
    "\n",
    "readline -> Python readline() is a file method that helps to read one complete line from the given file. It has a trailing newline (“\\n”) at                 the end of the string returned.\n",
    "You can also make use of the size parameter to get a specific length of the line. The size parameter is optional, and by default,                 the entire line will be returned \n",
    "              \n",
    "Example ->\n",
    "\n",
    "file = open(\"demo.txt\", \"r\")\n",
    "line = myfile.readline()\n",
    "while line:\n",
    "    print(line)\n",
    "    line = file.readline()\n",
    "file.close()   \n",
    "\n",
    "\n",
    "readlines -> The readlines() method returns a list containing each line in the file as a list item.Use the hint parameter to limit the number of lines returned. If the total number of bytes returned exceeds the specified number, no more lines are returned.\n",
    "\n",
    "Syntax\n",
    "file.readlines(hint)\n",
    "\n",
    "Example ->\n",
    "f = open(\"demofile.txt\", \"r\")\n",
    "print(f.readlines(33))\n",
    "\n",
    "\n",
    "\n",
    "Quetion5  ->  Explain why with statement is used with open(). What is the advantage of using with statement and\n",
    "              open() together?\n",
    "              \n",
    "              \n",
    "Solution  ->  In Python, the with statement replaces a try-catch block with a concise shorthand. More importantly, it ensures closing resources                 right after processing them. A common example of using the with statement is reading or writing to a file. A function or class that               supports the with statement is known as a context manager. A context manager allows you to open and close resources right when you               want to. For example, the open() function is a context manager. When you call the open() function using the with statement, the                   file closes automatically after you’ve processed the file.\n",
    "              The with statement is a replacement for commonly used try/finally error-handling statements. A common example of using the with                   statement is opening a file. To open and write to a file in Python.\n",
    "Example ->\n",
    "\n",
    "with open(\"example.txt\", \"w\") as file:\n",
    "    file.write(\"Hello World!\")             \n",
    "\n",
    "The with statement automatically closes the file after you’ve completed writing it.\n",
    "Under the hood, the with statement replaces this kind of try-catch block:\n",
    "\n",
    "f = open(\"example.txt\", \"w\")\n",
    "try:\n",
    "    f.write(\"hello world\")\n",
    "finally:\n",
    "    f.close()\n",
    "    \n",
    "When it requires storing some data permanently for the programming purpose, then a file is used to do this task. Generally, the open() function is used in Python to open a file for reading and writing. The open() method returns an object to work with the file. When any file is opened by the open() function, then it requires to close the file. Using the ‘with’ statement is the alternative way of opening a file in Python. It is better than the open() function and it helps to manage the resource more efficiently because it ensures that the opened resource is closed by closing the file automatically after completing the task. The file opening error can be handled also without try-except block using the ‘with’ statement.\n",
    "\n",
    "Example ->\n",
    "with open('demo.txt') as f:\n",
    "    data = f.readlines()\n",
    "    for value in data:\n",
    "        print(value, end='')\n",
    "if f.closed :\n",
    "    print(\"\\nThe file is closed.\")\n",
    "    \n",
    "    \n",
    "    \n",
    "Quetion6  ->  Explain the write() and writelines() functions. Give a suitable example. \n",
    "\n",
    "Solution  -> The write() method writes a specified text to the file.\n",
    "             Where the specified text will be inserted depends on the file mode and stream position.\n",
    "             \"a\":  The text will be inserted at the current file stream position, default at the end of the file.\n",
    "             \"w\": The file will be emptied before the text will be inserted at the current file stream position, default 0.\n",
    "\n",
    "Syntax\n",
    "file.write(byte)\n",
    "\n",
    "Example ->\n",
    "f = open(\"demofile2.txt\", \"a\")\n",
    "f.write(\"\\nI want to become a Data Scientist\")\n",
    "f.close()\n",
    "\n",
    "f = open(\"demofile2.txt\", \"r\")\n",
    "print(f.read())\n",
    "\n",
    "\n",
    "writelines -> Python file method writelines() writes a sequence of strings to the file. The sequence can be any iterable object producing                       strings, typically a list of strings. There is no return value.\n",
    "\n",
    "Syntax ->\n",
    "fileObject.writelines( sequence )\n",
    "\n",
    "Example ->\n",
    "file_handler = open(\"myfile.txt\", \"w\")\n",
    "file_handler.writelines([\"This is first line.\", \"This is second line.\"])\n",
    "file_handler.close()\n",
    "print(\"The content is written in the file.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
